#!/bin/bash
# ############################################################################################
# File: ........: deployPCF.sh
# Language .....: bash
# Author .......: Sacha Dubois, Pivotal
# Description ..: PCF Installation and Configuration Utility
# ############################################################################################

export PCFHOME=$(cd "$PWD/$(dirname $0)"; pwd)
export PCFPATH=$(cd "$PWD/$(dirname $0)"; pwd)

. $PCFPATH/functions

listDeployments() {
  printf "%-25s %-5s %-10s %-10s %s\n" "CONFIURATION" "CLOUD" "DEPLOYMENT" "MAINTAINER" "DESCRIPTION" 
  echo "-----------------------------------------------------------------------------------------------------------"

  for deployment in $(ls -1 ${PCFPATH}/deployments/*.cfg); do
    . $deployment

    dep=$(basename $deployment) 

    if [ "$PCF_TILE_PKS_VERSION" != "" ]; then 
      TILE="PKS $PCF_TILE_PKS_VERSION"
    else
      TILE="PAS $PCF_TILE_PAS_VERSION"
    fi

    printf "%-25s %-5s %-10s %-10s %s\n" $dep $PCF_DEPLOYMENT_CLOUD "$TILE" $PCF_DEPLOYMENT_MAINTAINER \
           "$PCF_DEPLOYMENT_DESCRIPTION"
  done
  
  echo "-----------------------------------------------------------------------------------------------------------"
}

usage() {
  echo "USAGE: $0 [oprions] <deployment.cfg>"
  echo "                   --clean/-c   # Clean previous installation and stop"
  echo "                   --debug/-d   # Enable debugging"
  echo "                                # the jump server"
}

LIST_DEPLOYMENTS=0
USAGE=0
export DEPLOY_PCF_DEBUG=0
export DEPLOY_PCF_CLEAN=0
PCFMODE=""

echo ""
echo "PCF Deployment Utility ($0)"
echo "by Sacha Dubois, Pivotal Inc,"
echo "-----------------------------------------------------------------------------------------------------------"

while [ "$1" != "" ]; do
  case $1 in
    -c)      DEPLOY_PCF_CLEAN=1;;
    --clean) DEPLOY_PCF_CLEAN=1;;
    -d)      DEPLOY_PCF_DEBUG=1;;
    --debug) DEPLOY_PCF_DEBUG=1;;
    *.cfg)   DEPLOY_PCF_DEPLOYMENT=$1;;
  esac
  shift
done

if [ "${DEPLOY_PCF_DEPLOYMENT}" == "" ]; then
  listDeployments
  usage; exit 0
fi

# --- VERIFY DEPLOYMENT ---
if [ ! -f ${PCFPATH}/deployments/${DEPLOY_PCF_DEPLOYMENT} ]; then 
  echo "ERROR: Deployment file $pcf_deployment can not be found in ${PCFPATH}/deployments"
  exit 1
fi


cnt=$(egrep -c "^PCF_DEPLOYMENT_CLOUD=" ${PCFPATH}/deployments/$DEPLOY_PCF_DEPLOYMENT)
if [ $cnt -eq 0 ]; then
  echo "ERROR: $pcf_deployment is not a correct PCFCONFIG deployment configuration file"
  exit 1
else
  missing_variables=0

  .  ${PCFPATH}/deployments/${DEPLOY_PCF_DEPLOYMENT}
  if [ $? -ne 0 ]; then 
    echo "ERROR: in ${PCFPATH}/deployments/${DEPLOY_PCF_DEPLOYMENT}"
    exit 1
  fi

  # --- CHECK ENVIRONMENT VARIABLES ---
  if [ -f ~/.pcfconfig ]; then 
    . ~/.pcfconfig
  fi

  messageTitle "Deployment Settings"
  messagePrint " - Cloud Provider"           "$PCF_DEPLOYMENT_CLOUD"
  messagePrint " - Environment Name"         "$PCF_DEPLOYMENT_ENV_NAME"
  messagePrint " - Deployment Description"   "$PCF_DEPLOYMENT_DESCRIPTION"
  messagePrint " - Debug Information"        "$PCF_DEPLOYMENT_DEBUG"

  messageTitle "Operation Manager Configuration"
  messagePrint " - OpsManager Version"       "$PCF_OPSMANAGER_VERSION"
  messagePrint " - OM Configuration File"    "$PCF_OPSMANAGER_CONFIG"
  messagePrint " - Administrator User"       "$PCF_OPSMANAGER_ADMIN_USER"
  messagePrint " - Administrator Password"   "$PCF_OPSMANAGER_ADMIN_PASS"

  if [ "${PCF_TILE_PKS_DEPLOY}" == "true" ]; then
    if [ "${PCF_TILE_PKS_ADMIN_USER}" == "" -o "${PCF_TILE_PKS_ADMIN_PASS}" == "" -o "${PCF_TILE_PKS_ADMIN_EMAIL}" == "" ]; then
      missing_variables=1
      echo ""
      echo "  MISSING ENVIRONMENT-VARIABES    DESCRIPTION        "
      echo "  --------------------------------------------------------------------------------------------------------------"

      if [ "${PCF_TILE_PKS_ADMIN_USER}" == "" ]; then
        echo "  PCF_TILE_PKS_ADMIN_USER       (required) PKS Administrator User"
      fi

      if [ "${PCF_TILE_PKS_ADMIN_PASS}" == "" ]; then
        echo "  PCF_TILE_PKS_ADMIN_PASS       (required) PKS Administrator Password"
      fi

      if [ "${PCF_TILE_PKS_ADMIN_EMAIL}" == "" ]; then
        echo "  PCF_TILE_PKS_ADMIN_EMAIL      (required) PKS Administrator Email"
      fi
    else
      messageTitle "Pivotal Container Platform (PKS)"
      messagePrint " - PKS Version"                   "$PCF_TILE_PKS_VERSION"
      messagePrint " - PKS Product SLUG"              "$PCF_TILE_PKS_SLUG"
      messagePrint " - OM Configuration File"         "$PCF_TILE_PKS_CONFIG"
      messagePrint " - Config Description"            "$PCF_TILE_PKS_DESCRIPTION"
      messagePrint " - PAS Stemcell Type"             "$PCF_TILE_PKS_STEMCELL_TYPE"
      messagePrint " - PAS Stemcell Version"          "$PCF_TILE_PKS_STEMCELL_VERSION"
      messagePrint " - PKS Administrator User"        "$PCF_TILE_PKS_ADMIN_USER"
      messagePrint " - PKS Administrator Password"    "$PCF_TILE_PKS_ADMIN_PASS"
      messagePrint " - PKS Administrator Email"       "$PCF_TILE_PKS_ADMIN_EMAIL"
    fi
  fi

  if [ "${PCF_TILE_PAS_DEPLOY}" == "true" ]; then
    if [ "${PCF_TILE_PAS_ADMIN_USER}" == "" -o "${PCF_TILE_PAS_ADMIN_PASS}" == "" -o "${PCF_TILE_PAS_ADMIN_EMAIL}" == "" ]; then
      missing_variables=1
      echo ""
      echo "  MISSING ENVIRONMENT-VARIABES    DESCRIPTION        "
      echo "  --------------------------------------------------------------------------------------------------------------"

      if [ "${PCF_TILE_PAS_ADMIN_USER}" == "" ]; then
        echo "  PCF_TILE_PAS_ADMIN_USER       (required) CF Administrator User"
      fi

      if [ "${PCF_TILE_PAS_ADMIN_PASS}" == "" ]; then
        echo "  PCF_TILE_PAS_ADMIN_PASS       (required) CF Administrator Password"
      fi

      if [ "${PCF_TILE_PAS_ADMIN_EMAIL}" == "" ]; then
        echo "  PCF_TILE_PAS_ADMIN_EMAIL      (required) CF Administrator Email"
      fi
    else
      messageTitle "Pivotal Container Platform (PAS)"
      messagePrint " - PAS Version"                   "$PCF_TILE_PAS_VERSION"
      messagePrint " - PAS Product SLUG"              "$PCF_TILE_PAS_SLUG"
      messagePrint " - OM Configuration File"         "$PCF_TILE_PAS_CONFIG"
      messagePrint " - OM Configuration Description"  "$PCF_TILE_PAS_DESCRIPTION"
      messagePrint " - PAS Stemcell Type"             "$PCF_TILE_PAS_STEMCELL_TYPE"
      messagePrint " - PAS Stemcell Version"          "$PCF_TILE_PAS_STEMCELL_VERSION"
      messagePrint " - PAS Administrator User"        "$PCF_TILE_PAS_ADMIN_USER"
      messagePrint " - PAS Administrator Password"    "$PCF_TILE_PAS_ADMIN_PASS"
      messagePrint " - PAS Administrator Email"       "$PCF_TILE_PAS_ADMIN_EMAIL"
    fi
  fi

  if [ ${missing_variables} -eq 1 ]; then
    echo "  --------------------------------------------------------------------------------------------------------------"
    echo "  IMPORTANT: Please set the missing environment variables either in your shell or in the pcfconfig"
    echo "             configuration file ~/.pcfconfig and set all variables with the 'export' notation"
    echo "             ie. => export AZURE_PKS_TLS_CERTIFICATE=/home/demouser/certs/cert.pem"
    echo "  --------------------------------------------------------------------------------------------------------------"
    exit 1
  fi
fi

if [ $DEPLOY_PCF_CLEAN -eq 1 ]; then
  [ -f ~/.pcfconfig ] && . ~/.pcfconfig

  messageTitle "Cleaning up environment ${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}"
  startJumpHost jump-${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}
  createENVfile $DEPLOY_PCF_DEPLOYMENT /tmp/deployPCFenv_${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}

  #cleanupEnvironment "${PCF_DEPLOYMENT_ENV_NAME}" "${AWS_REGION}"

  #OPSMAN
  #ssh -qi /home/ubuntu/workspace/cf-terraform-aws/terraforming-pas/opsman.pem ubuntu@pcf.awspas.pcfsdu.com 

  $SSH_COMMAND -n "[ -f \$HOME/pcfconfig/scripts/removePCFenv.sh ] && \$HOME/pcfconfig/scripts/removePCFenv.sh $envFile"

  stopJumpHost jump-${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}
  exit
else
  # --- VERIFY CLI TOOLS ---
  write_line
  checkCloudCLI
  write_line

  checkCloudAccess
  installJumpHost jump-${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}

  createENVfile $DEPLOY_PCF_DEPLOYMENT /tmp/deployPCFenv_${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}
  $SCP_COMMAND /tmp/deployPCFenv_${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \
               ${SSH_USER}@${SSH_HOST}:/tmp > /dev/null 2>&1

  $SSH_COMMAND -n "[ -f \$HOME/pcfconfig/scripts/deployPCFwrapper.sh ] && \$HOME/pcfconfig/scripts/deployPCFwrapper.sh $envFile"
  $SSH_COMMAND -n "tail -n 1000 -f /tmp/pcfconfig.log --pid \$(cat /tmp/pcfconfig.pid)"
fi

exit 0
