setPCFconfigState() {
  dirname=$(dirname $1)
  if [ -d $dirname ]; then 
    echo "$2" > $1
  fi
}

getPCFconfigState() {
  if [ -f "$1" ]; then 
    read x < $1
    echo $x
  else
    echo ""
  fi
}

cleanGCPenv() {
  # --- DELETE IMAGES ---
  for n in $(gcloud compute images list 2>/dev/null | \
        egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP Image:" "$n"
    gcloud compute images delete ${n} -q > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      gcloud compute images delete ${n} -q
      exit 1
    fi
  done

  # --- DELETE INSTANCES ---
  for n in $(gcloud compute instances list --filter="zone:($GCP_REGION)" 2>/dev/null | \
        grep -v "NAME" | awk '{ printf("%s:%s\n",$1,$2)}'); do

    nam=$(echo $n | awk -F: '{ print $1 }')
    zon=$(echo $n | awk -F: '{ print $2 }')
    messagePrint " - Cleaning up GCP Instance:" "$n"
    gcloud compute instances delete ${nam} --zone ${zon} -q > /dev/null 2>&1
    if [ $? -ne 0 ]; then 
      gcloud compute instances delete ${nam} --zone ${zon} -q
      exit 1
    fi
  done

  # --- DELETE MANAGED ZONES ---
  for zone in $(gcloud dns managed-zones list 2>/dev/null | \
      egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    rm -f /tmp/$$_tmp; touch /tmp/$$_tmp
    gcloud dns record-sets import --delete-all-existing -z $zone /tmp/$$_tmp >/dev/null 2>&1
    gcloud dns managed-zones delete $zone >/dev/null 2>&1
  done

  for n in $(gcloud compute networks subnets list --filter="region:($GCP_REGION)" 2>/dev/null | \
    egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP Subnet:" "$n"
    gcloud compute networks subnets delete $n --region=$GCP_REGION -q 2>/dev/null
    if [ $? -ne 0 ]; then 
      gcloud compute networks subnets delete $n --region=$GCP_REGION -q
      exit 1
    fi
  done

  # --- DELETE FIREWALL RULES ---
  #for n in $(gcloud compute firewall-rules list --filter="region:($GCP_REGION)" 2>/dev/null | \
  for n in $(gcloud compute firewall-rules list 2>/dev/null | \
      egrep "^$ENV_NAME" 2>/dev/null | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP firewall-tules:" "$n"
    gcloud compute firewall-rules delete $n -q 2>/dev/null
    if [ $? -ne 0 ]; then 
      gcloud compute firewall-rules delete $n -q
      exit 1
    fi
  done

  for net in $(gcloud compute networks list 2>/dev/null | \
      egrep "^$ENV_NAME" 2>/dev/null | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP Network:" "$net"
    gcloud compute networks delete $net -q 2>/dev/null
    if [ $? -ne 0 ]; then 
      gcloud compute networks delete $net -q
      exit 1
    fi
  done

  for n in $(gcloud iam service-accounts list 2>/dev/null | \
      grep -v "EMAIL" | egrep "^$ENV_NAME" | awk '{ print $(NF-1) }'); do

    messagePrint " - Cleaning up GCP Service Account:" "$n"
    gcloud iam service-accounts delete $n -q 2>/dev/null
  done

  for n in $(gcloud compute backend-services list --filter="region:($GCP_REGION)" 2>/dev/null | \
       egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP backend-services:" "$n"
    gcloud compute forwarding-rules delete $n -q 2>/dev/null
  done

  for n in $(gcloud compute forwarding-rules list --filter="region:($GCP_REGION)" 2>/dev/null | \
       egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP forwarding-rules:" "$n"
    gcloud compute forwarding-rules delete $n -q --region $GCP_REGION 2>/dev/null
  done

  for n in $(gcloud compute addresses list --filter="region:($GCP_REGION)" 2>/dev/null | \
       egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP Addresses:" "$n"
    gcloud compute addresses delete $n -q --region $GCP_REGION 2>/dev/null
  done

  for n in $(gcloud compute health-checks list --filter="region:($GCP_REGION)" 2>/dev/null | \
      egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP health-checks:" "$n"
    gcloud compute health-checks delete $n -q --region $GCP_REGION 2>/dev/null
  done

  for n in $(gcloud compute url-maps list --filter="region:($GCP_REGION)" 2>/dev/null | \
      egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP url-maps:" "$n"
    gcloud compute url-maps delete $n -q --region $GCP_REGION 2>/dev/null
  done

  for n in $(gcloud compute target-pools list --filter="region:($GCP_REGION)" 2>/dev/null | \
      egrep "^$ENV_NAME" | awk '{ print $1 }'); do

    messagePrint " - Cleaning up GCP target-pools:" "$n"
    gcloud compute target-pools delete $n -q --region $GCP_REGION 2>/dev/null
  done

  #gcloud compute backend-services list --filter="region:($GCP_REGION)"
  #gcloud compute target-tcp-proxies list
  #gcloud compute target-http-proxies list
}

checkCloudCLI() {
  if [ "${cloud}" == "GCP" -o "${TF_DEPLOYMENT}" == "gcp" ]; then
    # --- CHECK FOR AWS CLI ---
    GCLOUD=$(which gcloud)
    if [ "${GCLOUD}" != "" ]; then
      $GCLOUD --version >/dev/null 2>&1; ret=$?
      if [ ${ret} -eq 0 ]; then
        GCLOUD_VERSION=$($GCLOUD --version 2>/dev/null | grep "Google Cloud SDK" | awk '{ print $NF}')
        GCP_CLI_ENABLED=1
        messagePrint "checking for $cloud CLI utility" "installed - ${GCLOUD_VERSION}"
      else
        echo ""
        echo "ERROR: the terraform $(which terraform) does not seam to be correct"
        echo "       please install terraform from https://www.terraform.io/downloads.html"; exit 0
      fi
    else
      messagePrint "checking for $cloud CLI utility" "not installed"
    fi
  fi

  if [ "${cloud}" == "AWS" -o "${TF_DEPLOYMENT}" == "aws" ]; then
    # --- CHECK FOR AWS CLI ---
    AWSCLI=$(which aws)
    if [ "${AWSCLI}" != "" ]; then
      $AWSCLI --version >/dev/null 2>&1; ret=$?
      if [ ${ret} -eq 0 ]; then
        AWS_VERSION=$($AWSCLI --version 2>/dev/null | awk -F'/' '{ print $2 }' | awk '{ print $1}')
        AWS_CLI_ENABLED=1
        messagePrint "checking for $cloud CLI utility" "installed - ${AWS_VERSION}"
      else
        echo ""
        echo "ERROR: the terraform $(which terraform) does not seam to be correct"
        echo "       please install terraform from https://www.terraform.io/downloads.html"; exit 0
      fi
    else
      messagePrint "checking for $cloud CLI utility" "no installed"
    fi
  fi

  if [ "${cloud}" == "Azure" -o "${TF_DEPLOYMENT}" == "azure" ]; then
    # --- CHECK FOR AWS CLI ---
    AZCLI=$(which az)
    if [ "${AZCLI}" != "" ]; then
      $AZCLI -v >/dev/null 2>&1; ret=$?
      if [ ${ret} -eq 0 ]; then
        AZ_VERSION=$($AZCLI -v 2>/dev/null | egrep "^azure-cli" | awk '{ print $2 }'); ret=$?
        AZURE_CLI_ENABLED=1
        messagePrint "checking for $cloud CLI utility" "installed - ${AZ_VERSION}"
      else
        echo ""
        echo "ERROR: the $cloud CLI $(which az) does not seam to be correct"
        echo "       please install it from https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest"; exit 0
      fi
    else
      messagePrint "checking for $cloud CLI utility" "no installed"
    fi
  fi
}

wait_loop() {
  TIME=$1
  MESSAGE="$2"
  echo -e "$2 \c"

  n=1
  while [ $n -le $TIME ]; do
    str=$(printf "[%03d/%03d]" $n $TIME)
    echo -e ". $str\c"
    sleep 1
    echo -e "\b\b\b\b\b\b\b\b\b\b\c       "
    let n=n+1
  done

  echo -e "\n"
}

messagePrint() {
  msg="$1"
  stt="$2"
  cnt=$(echo "${msg}" | wc -c | sed 's/ //g')

  str=""
  while [ $cnt -lt 58 ]; do
    str="${str}."
    let cnt=cnt+1
  done
  echo "${msg} ${str}: ${stt}"
}

