#!/bin/bash
# ############################################################################################
# File: ........: pcfconfig-pks-harbor
# Language .....: bash
# Author .......: Sacha Dubois, Pivotal
# Description ..: PCF OpsManager Configuration Utility
# ############################################################################################

if [ "${1}" == "" ]; then
  echo "$0 <env-file>"; exit 0
fi

envFile=$1

export PCFCONFIG_BASE=$(basename $0)
export PCFPATH=$HOME/pcfconfig

# --- SOURCE FUNCTIONS---
. ${PCFPATH}/functions
. $envFile

messageTitle ""
messageTitle "PCF Configuration Utility Module: (pcfconfig-pks-harbor)"
messageTitle "by Sacha Dubois, Pivotal Inc,"
messageTitle "-----------------------------------------------------------------------------------------------------------"

# --- CHECK UTILITIES ---
checkOpsMantools

messageTitle "Install Harbor"
messagePrint " - Harbor Version:"                  "$PCF_TILE_HARBOR_VERSION"
messagePrint " - Harbor Slug:"                     "$PCF_TILE_HARBOR_NAME"
messagePrint " - Tile Config:"                     "$PCF_TILE_HARBOR_CONFIG"
messagePrint " - Stemcell Type:"                   "$PCF_TILE_HARBOR_STEMCELL_TYPE"
messagePrint " - Stemcell Version:"                "$PCF_TILE_HARBOR_STEMCELL_VERSION"

HARBOR_SLUG=$PCF_TILE_HARBOR_NAME
HARBOR_VERSION=$PCF_TILE_HARBOR_VERSION

OPS_MANAGER_URL="pcf.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}"
OM_LOGIN="--skip-ssl-validation --target ${OPS_MANAGER_URL} --username $PCF_OPSMANAGER_ADMIN_USER \
          --password $PCF_OPSMANAGER_ADMIN_PASS"

PRODUCT_NAME="VMware Harbor Container Registry for PCF"

uploadProductTile "${PCF_TILE_HARBOR_NAME}" "${PCF_TILE_HARBOR_VERSION}" "${PRODUCT_NAME}"
uploadStemCell    "${PCF_TILE_HARBOR_STEMCELL_TYPE}" "${PCF_TILE_HARBOR_STEMCELL_VERSION}"

##############################################################################################
################################ CONFIGURE PKS LOADBALANCERS #################################
##############################################################################################
messageTitle Creating Workload LoadBalancer (${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb)"

if [ "${PCF_DEPLOYMENT_CLOUD}" == "azure" ]; then
echo gaga1
  # --- CREATE PULIC IP FOR LOADBALANCER ---
  ipa=$(az network public-ip list -g $PCF_DEPLOYMENT_ENV_NAME --query "[?name=='${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip']" | \
        jq -r '.[].ipAddress')
  if [ "${ipa}" == "" ]; then
    az network public-ip create -g $PCF_DEPLOYMENT_ENV_NAME -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip \
       --allocation-method Static --sku Standard > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failled to create publicip"
      echo "       => az network public-ip create -g $PCF_DEPLOYMENT_ENV_NAME -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip \\"
      echo "             --allocation-method Static"
      exit 1
    fi

    ipa=$(az network public-ip list -g $PCF_DEPLOYMENT_ENV_NAME --query "[?name=='${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip']" | \
         jq -r '.[].ipAddress')
    messagePrint " - Create LB Public IP ($ipa)" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip"
  else
    messagePrint " - Verify LB Public IP ($ipa)" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip"
  fi

echo gaga2
  # --- CHECK IF ENTRY EXISTS ---
  rec=$(az network dns record-set list -g ${PCF_DEPLOYMENT_ENV_NAME} \
           --zone-name ${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \
           --query "[?fqdn=='${n}.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}.']" | jq -r '.[].fqdn')
  if [ "${rec}" == "" ]; then
    messagePrint " - Creating DNS entry (harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN})" "$ipa"
    az network dns record-set a add-record -g ${PCF_DEPLOYMENT_ENV_NAME} \
       --zone-name ${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \
       --record-set-name harbor --ipv4-address $ipa > /dev/null 2>&1
    if [ "$?" -ne 0 ]; then
      echo "ERROR: Can not create DNS record for harbor (harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN})"
      echo "       => az network dns record-set a add-record -g ${PCF_DEPLOYMENT_ENV_NAME} \\"
      echo "             --zone-name ${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} --record-set-name harbor \\"
      echo "             --ipv4-address $ipa"; exit 1
    fi
  else
    messagePrint " - Verify DNS entry for (harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN})" "$ipa"
  fi

echo gaga3
  # --- CHECK IF LB EXISTS ---
  lbn=$(az network lb list -g ${PCF_DEPLOYMENT_ENV_NAME} --query "[?name == '${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb']" | \
           jq -r '.[].name')
  if [ "${lbn}" == "" ]; then
    messagePrint " - Creating loadbalancer" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb"
    az network lb create -g ${PCF_DEPLOYMENT_ENV_NAME} -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb --sku Standard \
       --public-ip-address "${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip" --location $AZURE_REGION \
       --backend-pool-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-pool > /dev/null 2>&1
    if [ "$?" -ne 0 ]; then
      echo "ERROR: Can not create loadbalancer (${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb)"
      echo "       => az network lb create -g ${PCF_DEPLOYMENT_ENV_NAME} -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \\"
      echo "           --sku Standard --public-ip-address ${PCF_DEPLOYMENT_ENV_NAME}-harbor-ip \\"
      echo "           --backend-pool-name ${n}-pool --location $AZURE_REGION"
      exit 1
    fi
  else
    messagePrint " - Verify loadbalancer" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb"
  fi

echo gaga4
  # --- CREATE LB HEALTH PROBE ---
  prb=$(az network lb probe show -g ${PCF_DEPLOYMENT_ENV_NAME} --lb-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \
           -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-probe 2>/dev/null | jq -r '.name')
  if [ "${prb}" == "" ]; then
    messagePrint " - Creating LB Health Probe for port 443" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-probe"
    az network lb probe create -g ${PCF_DEPLOYMENT_ENV_NAME} --lb-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \
       -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-probe --protocol tcp --port 443 > /dev/null 2>&1
    if [ "$?" -ne 0 ]; then
      echo "ERROR: Can not create LB Health Probe"
      echo "       => az network lb probe create -g ${PCF_DEPLOYMENT_ENV_NAME} ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \\"
      echo "             -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-probe --protocol tcp --port 443"
      exit 1
    fi
  else
    messagePrint " - Verify LB Health Proble for port 443" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-probe"
  fi

echo gaga5
  # --- CREATE LB RULE ---
  rul=$(az network lb rule show -g ${PCF_DEPLOYMENT_ENV_NAME} --lb-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \
           -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-rule 2>/dev/null | jq -r '.name')
  if [ "${rul}" == "" ]; then
    messagePrint " - Creating LB Rule for port 443" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-rule"
    az network lb rule create -g ${DNS_PREFIX} --lb-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \
       -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-rule --protocol tcp \
       --frontend-port 443 --backend-port 443 --backend-pool-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-pool \
       --probe-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-probe > /dev/null 2>&1
    if [ "$?" -ne 0 ]; then
      echo "ERROR: Can not create address-pool"
      echo "       => az network lb rule create -g ${PCF_DEPLOYMENT_ENV_NAME} --lb-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \\"
      echo "          -n ${PCF_DEPLOYMENT_ENV_NAME}-harbor-rule --protocol tcp --frontend-port 443 --backend-port 443 \\"
      echo "          --backend-pool-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-pool \\"
      echo "          --probe-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-probe"
      exit 1
    fi
  else
    messagePrint " - Verify LB Rule for port 443" "${PCF_DEPLOYMENT_ENV_NAME}-harbor-rule"
  fi

echo gaga10
fi

##############################################################################################
############################## GET CLUSTER INSTANCES GET INSTANCES ###########################
##############################################################################################

director_ip=$($OM $OM_LOGIN curl --path /api/v0/deployed/director/manifest 2>/dev/null | \
              jq -r '.instance_groups[].properties.director.address')
director_cd=$($OM $OM_LOGIN curl --path /api/v0/deployed/director/credentials/uaa_admin_user_credentials 2>/dev/null | \
              jq -r '.credential.value.password')

TMP_LBSCRIPT=/tmp/harbor-nodes.sh

echo "cert=/var/tempest/workspaces/default/root_ca_certificate"                                          >  $TMP_LBSCRIPT
echo "bosh alias-env $PCF_DEPLOYMENT_ENV_NAME -e $director_ip --ca-cert \$cert >/dev/null 2>&1"          >> $TMP_LBSCRIPT
echo "echo -e \"admin\n${director_cd}\" | bosh -e $DNS_PREFIX login >/dev/null 2>&1"                     >> $TMP_LBSCRIPT
echo "dep=\$(bosh -e $PCF_DEPLOYMENT_ENV_NAME deployments | egrep \"^harbor-container-registry\" | \\"   >> $TMP_LBSCRIPT
echo "  awk '{ print \$1 }')"                                                                            >> $TMP_LBSCRIPT
echo "bosh -e $PCF_DEPLOYMENT_ENV_NAME -d \$dep --column='Instance' --column='VM CID' vms | \\"          >> $TMP_LBSCRIPT
echo "egrep \"^harbor-app/\" | sed -e 's/;/ /g' -e 's/agent_id://g' | awk '{ print \$2 }'"               >> $TMP_LBSCRIPT

OPS_MANAGER_DNS=pcf.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}
TMP_OPSMAN="/tmp/opsman.pem"

scp -o StrictHostKeyChecking=no -qi $TMP_OPSMAN $TMP_LBSCRIPT ubuntu@${OPS_MANAGER_DNS}:/tmp/harbor.sh; ret=$?
if [ ${ret} -ne 0 ]; then
  echo "ERROR: Copying script /tmp/masters.sh to ubuntu@${OPS_MANAGER_DNS} has been failed"
  echo "       Please try manually:"
  echo "       => scp -o StrictHostKeyChecking=no -i $TMP_OPSMAN $TMP_LBSCRIPT ubuntu@${OPS_MANAGER_DNS}:/tmp/harbor.sh"
  exit 1
fi

ssh -o StrictHostKeyChecking=no -qi $TMP_OPSMAN ubuntu@${OPS_MANAGER_DNS} -n "bash /tmp/harbor.sh" >/dev/null 2>&1; ret=$?
if [ ${ret} -ne 0 ]; then
  echo "ERROR: executing remote-script: /tmp/masters.sh on ubuntu@${OPS_MANAGER_DNS} has been failed"
  echo "       Please try manually:"
  echo "       => ssh -i $TMP_OPSMAN ubuntu@${OPS_MANAGER_DNS} -n \"bash /tmp/harbor.sh\""
  exit 1
else
  mst=$(ssh -o StrictHostKeyChecking=no -qi $TMP_OPSMAN ubuntu@${OPS_MANAGER_DNS} -n "bash /tmp/harbor.sh" 2>/dev/null)
  if [ "${mst}" == "" ]; then
    echo "ERROR: failed to retrieve the hostname and ip adresses of the master nodes"
    echo "       => ssh -i $TMP_OPSMAN ubuntu@${OPS_MANAGER_DNS} -n \"bash /tmp/harbor.sh\""
  fi
fi

##############################################################################################
############################## ADD HARBOR NODES TO BACKEND-POOL ##############################
##############################################################################################

if [ "${PCF_DEPLOYMENT_CLOUD}" == "azure" ]; then
  messageTitle "Adding Master Nodes of PKS Cluster ($n) to LB" "${n}-lb"
  for node in $mst; do
    messagePrint " - Add/update Master Node" "${node}"
    nid=$(az vm get-instance-view -n $node -g ${PCF_DEPLOYMENT_ENV_NAME} 2>/dev/null | \
          jq -r '.networkProfile.networkInterfaces[].id')
    if [ "${nid}" == "" ]; then
      echo "ERROR: failed to get Network id of Instance $node"
      echo "       => az vm get-instance-view -n $node -g ${PCF_DEPLOYMENT_ENV_NAME}"; exit 1
    fi

    nnm=$(az network nic show --ids $nid 2>/dev/null | jq -r '.name')
    if [ "${nnm}" == "" ]; then
      echo "ERROR: failed to get Network Name of Instance $node"
      echo "       => az network nic show --ids $nid"; exit 1
    fi

    ipc=$(az network nic ip-config list -g ${PCF_DEPLOYMENT_ENV_NAME} --nic-name $nnm 2>/dev/null | jq -r '.[].name')
    if [ "${ipc}" == "" ]; then
      echo "ERROR: failed to get IP Config of Instance $master"
      echo "       => az network nic ip-config list -g ${PCF_DEPLOYMENT_ENV_NAME} --nic-name $nnm"
    fi

    az network nic ip-config address-pool add -g ${PCF_DEPLOYMENT_ENV_NAME} --nic-name $nnm \
       --lb-name "${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb" \
       --address-pool "${PCF_DEPLOYMENT_ENV_NAME}-harbor-pool" --ip-config-name $ipc > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to add the master vm $master to backendpool ${n}-pool"
      echo "       => az network nic ip-config address-pool add -g ${PCF_DEPLOYMENT_ENV_NAME} \\"
      echo "          --nic-name $nnm --lb-name ${PCF_DEPLOYMENT_ENV_NAME}-harbor-lb \\"
      echo "          --address-pool "${PCF_DEPLOYMENT_ENV_NAME}-harbor-pool" --ip-config-name $ipc"; exit 1
    fi
  done
fi


exit

#az network public-ip create -n azpks-harbor-ip -g azpks --sku Standard --allocation-method static
#ipa=$(az network public-ip show -n azpks-harbor-ip -g azpks | jq -r '.ipAddress')
#az network nsg create -n azpks-harbor-sg -g azpks 
#az network nsg rule create -g azpks --nsg-name azpks-harbor-sg -n AllowVnetInBound --protocol "*" --direction Inbound --source-port-ranges 0-65535 --priority 100
#az network nsg rule create -g azpks --nsg-name azpks-harbor-sg -n AllowVnetOutBound --protocol "*" --direction Outbound --source-port-ranges 100-4096 --priority 100
#az network dns record-set a add-record -g azpks --zone-name azpks.pcfsdu.com --record-set-name harbor --ipv4-address 51.144.188.185
#az network nic create -g azpks --name azpks-harbor-nic --vnet-name azpks-virtual-network --subnet azpks-infrastructure-subnet --public-ip-address azpks-harbor-ip --network-security-group azpks-harbor-sg
#az network nic ip-config address-pool add -g azpks --nic-name $nnm --lb-name "${n}-lb" \
             --address-pool "${n}-pool" --ip-config-name $ipc

# --- CREATE LB ---
#az network public-ip create -n azpks-harbor-ip -g azpks --sku Standard --allocation-method static
#az network lb create -g azpks -n azpks-harbor-lb --sku Standard --public-ip-address azpks-harbor-ip --location westeurope  --backend-pool-name azpks-harbor-pool
#az network lb probe create -g azpks --lb-name azpks-harbor-lb -n azpks-harbor-lb-probe --protocol tcp --port 443
az network lb rule create -g azpks --lb-name azpks-harbor-lb -n azpks-harbor-lb-rule --protocol tcp \
             --frontend-port 443 --backend-port 443 --backend-pool-name azpks-harbor-pool --probe-name azpks-harbor-lb-probe

ipc=$(az network nic ip-config list -g azpks --nic-name azpks-harbor-nic  | jq -r '.[].name') 
ipc=ipconfig1
#az network nic ip-config address-pool add -g azpks --nic-name azpks-harbor-nic --lb-name "azpks-harbor-lb" \
             --address-pool "azpks-harbor-pool" --ip-config-name ipconfig1

#az network nic delete -g azpks --name harbor-nic

exit 1
