#!/bin/bash
# ############################################################################################
# File: ........: pcfconfig-pks-ingress
# Language .....: bash
# Author .......: Sacha Dubois, Pivotal
# Description ..: PCF OpsManager Configuration Utility
# ############################################################################################

if [ "${1}" == "" ]; then
  echo "$0 <env-file>"; exit 0
fi

envFile=$1

export PCFCONFIG_BASE=$(basename $0)
export PCFPATH=$HOME/pcfconfig

# --- SOURCE FUNCTIONS---
. ${PCFPATH}/functions
. $envFile

sshEnvironment

# --- ENVIRONMENT VARIABLES ---
API_HOST_NAME=api.pks.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}
DNS_PREFIX=$PCF_DEPLOYMENT_ENV_NAME
DNS_SUFFIX=$AWS_HOSTED_DNS_DOMAIN
export PKS_USER_PASSWORD=$PCF_TILE_PKS_ADMIN_PASS

# --- LOGIN TO PKS ---
i=1; stt=1
while [ $i -lt 10 ]; do
  pks login -u ${PCF_TILE_PKS_ADMIN_USER} -p ${PCF_TILE_PKS_ADMIN_PASS} \
            -a ${API_HOST_NAME} --skip-ssl-validation > /dev/null 2>&1
  if [ $? -eq 0 ]; then stt=0; break; fi
  let i=i+1; sleep 10
done

if [ $stt -eq 1 ]; then
  debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS))

  echo "ERROR: Failed to login to pks"
  echo "       => pks login -u ${PCF_TILE_PKS_ADMIN_USER} -p ${PCF_TILE_PKS_ADMIN_PASS} \\"
  echo "                    -a ${API_HOST_NAME} --skip-ssl-validation" 
  exit
fi

######################################################################################################
########################################## INSTALL INGRESS ###########################################
######################################################################################################
cluster=cl1

echo "pcfconfig-pks-ingress: PKS_USER_PASSWORD:$PKS_USER_PASSWORD"
#pks login -u sadubois -p pivotal -a api.pks.awspks.pcfsdu.com --ca-cert ~/pcfconfig/certificates/fullchain.pem
pks get-credentials $cluster > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "ERROR: failed to get pks credentials for cluster $cluster"
  echo "       => export PKS_USER_PASSWORD=$PKS_USER_PASSWORD"
  echo "       => pks get-credentials $cluster"
  exit
fi

echo bla1
pks clusters
echo bla2

#Pivotal-MacBook-Pro:~ sadubois$ kubectl get psp pks-restricted -o yaml
#Pivotal-MacBook-Pro:~ sadubois$ kubectl get psp 

userid=""; while [ "${userid}" == "" ]; do
echo "pcfconfig-pks-ingress: Debug 33.1"
  userid=$(kubectl config view -o jsonpath="{.contexts[?(@.name == \"$cluster\")].context.user}" 2>/dev/null)
  secret=$(kubectl get secret 2>/dev/null | grep $userid | awk '{print $1}')
  token=$(kubectl describe secret $secret 2>/dev/null | grep "token:" | awk '{ print $2 }')
  [ "${userid}" == "" -o "${token}" == "" ] && sleep 30
done

echo "userid:$userid"
echo "token:$token"

kubectl config use-context $cluster > /dev/null 2>&1

kubectl get namespaces > /dev/null 2>&1
if [ $? -ne 0 ]; then 
  echo "ERROR: failed to access kubernetes cluster $cluster"
  exit
fi

echo gggg1
kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin \
        --serviceaccount=kube-system:default > /dev/null 2>&1
echo gggg2

# --- VERIFY NAMESPACE ---
kubectl get namespace ingress > /dev/null 2>&1
if [ $? -ne 0 ]; then kubectl create namespace ingress > /dev/null 2>&1; fi

cnt=$(helm search repo stable/nginx-ingress 2>/dev/null | egrep -c "stable/nginx-ingress")
if [ $cnt -eq 0 ]; then
  messageTitle "Install and configure Helm Charts"
  messagePrint " - Helm Version:"         "$(helm version --short)"
  messagePrint " - Helm Repo:"            "https://kubernetes-charts.storage.googleapis.com"

  HELM=$(which helm)
  if [ ! -x "$HELM" ]; then
    echo "ERROR: unable to find the helm utility"
    exit 1
  fi

  # --- INSTALLING HELM ---
  helm repo add stable https://kubernetes-charts.storage.googleapis.com/ > /dev/null 2>&1
  helm repo update > /dev/null 2>&1
  kubectl apply -f $PCFCONFIG_PATH/demos/k8s-helm/rbac-config.yaml > /dev/null 2>&1
  helm init --service-account tiller > /dev/null 2>&1
  sleep 30
fi

cnt=$(helm list --namespace ingress --filter nginx-ingress -q) 
if [ "${cnt}" == "" ]; then
  messageTitle "Install Ingress Controller (nginx-ingress)"
  messagePrint " - Namespace:"                  "ingress"
  messagePrint " - Ingress Release:"            "stable/nginx-ingress"
  messagePrint " - Service Name:"               "nginx-ingress-controller"
  messagePrint " - Options:"                    "rbac.create=true"

  helm install nginx-ingress stable/nginx-ingress --set rbac.create=true --namespace ingress > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))

    echo "ERROR: failed to deploy ingress controller with helm"
    echo "       => helm install nginx-ingress stable/nginx-ingress --set rbac.create=true --namespace ingress"
    echo ""

    exit 1
  fi
fi

DNSLB="pending"
while [ "${DNSLB}" == "pending" -o "${DNSLB}" == "<pending>" ]; do
  sleep 10
  DNSLB=$(kubectl get svc -n ingress | grep nginx-ingress-controller | awk '{ print $4 }')
done

if [ "${DNSLB}" == "" ]; then
  debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))

  echo "ERROR: optaining name/ip of Ingress Controller"
  echo "       => kubectl get svc -n ingress | grep nginx-ingress-controller"
  exit 1
fi

if [ "${PCF_DEPLOYMENT_CLOUD}" == "AWS" ]; then
  AWS_ID=$(echo $DNSLB | awk -F '-' '{ print $1 }')
  AWS_LB="k8s-master-$cluster"
  AWS_SG=$(aws elb --region $AWS_REGION describe-load-balancers --load-balancer-names $AWS_ID | \
           jq -r '.LoadBalancerDescriptions[].SecurityGroups[]')
  AWS_VP=$(aws elb --region $AWS_REGION describe-load-balancers --load-balancer-names $AWS_ID | \
           jq -r '.LoadBalancerDescriptions[].VPCId')

  cnt=$(echo "${AWS_SG}" | egrep -c "$AWS_SG_NEW")
  if [ $cnt -eq 0 ]; then
    a=1
  fi
fi

echo "555555555555555555555555 - 0"
if [ "${PCF_DEPLOYMENT_CLOUD}" == "GCP" ]; then
echo "555555555555555555555555 - 1"
  DNS_NAME="*.apps-${cluster}"
  messageTitle "Create DNS Entry for *.apps-${cluster}.${DNS_PREFIX}.${DNS_SUFFIX}"

  cnt=$(gcloud dns record-sets list -z ${DNS_PREFIX}-zone --name "${DNS_NAME}.${DNS_PREFIX}.${DNS_SUFFIX}." \
          --type=A 2> /dev/null | grep -v "^NAME" | wc -l | sed 's/ //g')
echo "CNT:$cnt"
  if [ ${cnt} -eq 0 ]; then
    messagePrint " - Creating DNS Entry in (${DNS_PREFIX}-zone)" "${DNS_NAME}"
echo "gcloud dns record-sets transaction start -z ${DNS_PREFIX}-zone"
echo "gcloud dns record-sets transaction add $DNSLB --name \"${DNS_NAME}.${DNS_PREFIX}.${DNS_SUFFIX}\" --type A -z \"${DNS_PREFIX}-zone\" --ttl=300"
echo "gcloud dns record-sets transaction execute -z ${DNS_PREFIX}-zone"

    gcloud dns record-sets transaction abort -z ${DNS_PREFIX}-zone > /dev/null 2>&1
    gcloud dns record-sets transaction start -z ${DNS_PREFIX}-zone > /dev/null 2>&1
echo "1 $?"
    gcloud dns record-sets transaction add "$DNSLB" --name "${DNS_NAME}.${DNS_PREFIX}.${DNS_SUFFIX}." \
       --type A -z ${DNS_PREFIX}-zone --ttl=300 > /dev/null 2>&1
echo "2 $?"
    gcloud dns record-sets transaction execute -z ${DNS_PREFIX}-zone > /dev/null 2>&1; ret=$?
echo "3 $?"
    if [ ${ret} -ne 0 ]; then
      echo "ERROR: Creating DNS record-sets for zone (${DNS_PREFIX}-zone)"
      echo "       => gcloud dns record-sets transaction execute -z ${DNS_PREFIX}-zone"
      exit 1
    fi
  fi
echo "555555555555555555555555 - 10"
fi

if [ "${PCF_DEPLOYMENT_CLOUD}" == "Azure" ]; then
  DNS_NAME="*.apps-${cluster}"
  echo "Create DNS Entry for *.apps.${cluster}.${DNS_PREFIX}.${DNS_SUFFIX}:"

  az network dns record-set a show -g $DNS_PREFIX -z ${DNS_PREFIX}.${DNS_SUFFIX} -n $DNS_NAME > /dev/null 2>&1
  if [ $? -eq 0 ]; then
   ipa=$(az network dns record-set a show -g $DNS_PREFIX -z ${DNS_PREFIX}.${DNS_SUFFIX} -n $DNS_NAME | \
       jq -r '.arecords[].ipv4Address')
    az network dns record-set a remove-record -g $DNS_PREFIX -z ${DNS_PREFIX}.${DNS_SUFFIX} \
       -n $DNS_NAME -a $ipa > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))

      echo "ERROR: failed to delete DNS record-set for $DNS_NAME"
      echo "       => az network dns record-set a remove-record -g $DNS_PREFIX \\"
      echo "          -n $DNS_NAME -a $ipa"
      exit 1
    fi
  fi

  az network dns record-set a add-record -g $DNS_PREFIX -z "${DNS_PREFIX}.${DNS_SUFFIX}" \
      -n "$DNS_NAME" --ipv4-address $DNSLB > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))

    echo "ERROR: failed to create DNS record-set for $DNS_NAME"
    echo "       => az network dns record-set a add-record -g $DNS_PREFIX \\"
    echo "          -z ${DNS_PREFIX}.${DNS_SUFFIX} -n $DNS_NAME --ipv4-address $DNSLB"
    exit 1
  fi
fi

if [ "${AWS_HOSTED_ZONE_ID}" != "" -a "${PCF_DEPLOYMENT_CLOUD}" == "AWS" ]; then
  ZONE_ID_STR=$(echo "${ZONE_ID}" | awk -F'/' '{ print $NF }')
  DNSLB=$(aws elb --region $AWS_REGION describe-load-balancers --load-balancer-names "$AWS_ID" | \
      jq -r '.LoadBalancerDescriptions[0].DNSName')
  DNSLB_ZONEID=$(aws elb --region $AWS_REGION describe-load-balancers --load-balancer-names "$AWS_ID" | \
      jq -r '.LoadBalancerDescriptions[0].CanonicalHostedZoneNameID')
  ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name ${DNS_PREFIX}.${DNS_SUFFIX} | jq -r '.HostedZones[0].Id')

  ALIAS=$(aws route53 list-resource-record-sets --hosted-zone-id $ZONE_ID \
          --query "ResourceRecordSets[?contains(Name, 'apps-${cluster}.${DNS_PREFIX}.${DNS_SUFFIX}')].AliasTarget.DNSName" | \
          jq -r '.[]' | sed -e 's/dualstack\.//g' -e 's/\.$//g' )

  if [ "${ALIAS}" != "$DNSLB" ]; then
    if [ "${ZONE_ID}" != "" ]; then
      echo "Create DNS Entry for *.apps-${cluster}.${DNS_PREFIX}.${DNS_SUFFIX}:"
      ZONE="*.${cluster}.${DNS_PREFIX}.${DNS_SUFFIX}"
      ZONE="*.apps-${cluster}.${DNS_PREFIX}.${DNS_SUFFIX}"

      TMPROUTE53=/tmp/$$_tmp_route53.json
      echo "{"                                                   >  $TMPROUTE53
      echo "  \"Comment\": \"CREATE/DELETE/UPSERT a record \","  >> $TMPROUTE53
      echo "  \"Changes\": [{"                                   >> $TMPROUTE53
      echo "  \"Action\": \"UPSERT\","                           >> $TMPROUTE53
      echo "  \"ResourceRecordSet\": {"                          >> $TMPROUTE53
      echo "    \"Name\": \"${ZONE}\","                          >> $TMPROUTE53
      echo "    \"Type\": \"A\","                                >> $TMPROUTE53
      echo "    \"AliasTarget\": {"                              >> $TMPROUTE53
      echo "      \"HostedZoneId\": \"${DNSLB_ZONEID}\","        >> $TMPROUTE53
      echo "      \"DNSName\": \"dualstack.${DNSLB}.\","         >> $TMPROUTE53
      echo "      \"EvaluateTargetHealth\": true"                >> $TMPROUTE53
      echo "    }"                                               >> $TMPROUTE53
      echo "}}]"                                                 >> $TMPROUTE53
      echo "}"                                                   >> $TMPROUTE53

      aws route53 change-resource-record-sets --hosted-zone-id $ZONE_ID \
          --change-batch file://${TMPROUTE53} > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "ERROR: failed to set DNS for $hnm"
        echo "       => aws route53 change-resource-record-sets --hosted-zone-id \"${ZONE_ID}\" \\"
        echo "              --change-batch file://${TMPROUTE53}"
        cat $TMPROUTE53
        exit 1
      fi

      rm -f $TMPROUTE53
    fi
  fi
fi












