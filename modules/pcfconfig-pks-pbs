#!/bin/bash
# ############################################################################################
# File: ........: pcfconfig-pks-pbs
# Language .....: bash
# Author .......: Sacha Dubois, Pivotal
# Description ..: PCF OpsManager Configuration Utility
# ############################################################################################

if [ "${1}" == "" ]; then
  echo "$0 <env-file>"; exit 0
fi

envFile=$1

# --- SOURCE FUNCTIONS---
. ${PCFPATH}/functions
. $envFile

[ "$PCF_DEPLOYMENT_CLOUD" == "AWS" ] && TF_DEPLOYMENT="aws"
[ "$PCF_DEPLOYMENT_CLOUD" == "Azure" ] && TF_DEPLOYMENT="azure"
[ "$PCF_DEPLOYMENT_CLOUD" == "GCP" ] && TF_DEPLOYMENT="gcp"

if [ "$PCF_TILE_PKS_DEPLOY" == "true" ]; then PRODUCT_TILE=pks; else PRODUCT_TILE=pas; fi

export DEBUG=0
export PCFCONFIG_BASE=$(basename $0)
export PCFPATH=$HOME/pcfconfig
export TF_WORKDIR=$HOME/workspace
export TF_STATE=${TF_WORKDIR}/cf-terraform-${TF_DEPLOYMENT}/terraforming-${PRODUCT_TILE}/terraform.tfstate
export TF_VARS=${TF_WORKDIR}/cf-terraform-${TF_DEPLOYMENT}/terraforming-${PRODUCT_TILE}/terraform.tfvars

export PBS_SETUP=bs4_azure
export PBS_SETUP="pbs-${PCF_DEPLOYMENT_ENV_NAME}"
export UAAC_TARGET=api.pks.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}
export OM_TARGET=pcf.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}
export OM_USERNAME=$PCF_OPSMANAGER_ADMIN_USER
export OM_PASSWORD=$PCF_OPSMANAGER_ADMIN_PASS
export OM_SKIP_SSL_VALIDATION=true
export PBS_TAGET=build-service.apps-cl1.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}

messageTitle ""
messageTitle "PCF Configuration Utility Module: (pcfconfig-pks-pbs)"
messageTitle "by Sacha Dubois, Pivotal Inc,"
messageTitle "-----------------------------------------------------------------------------------------------------------"

# --- CHECK UTILITIES ---
checkOpsMantools

export PCF_TILE_PBS_NAME="Pivotal Build Service"
export PCF_TILE_PBS_SLUG=build-service
export PCF_TILE_PBS_VERSION=0.0.4

sshEnvironment

messageTitle "Install Pivotal Build Service (PBS)"
messagePrint " - PBS Version:"                     "$PCF_TILE_PBS_VERSION"
messagePrint " - PBS Name:"                        "$PCF_TILE_PBS_NAME"
messagePrint " - PBS Slug:"                        "$PCF_TILE_PBS_SLUG"

PBS_BUNDLE=$(downloadFromPivnet $PCF_TILE_PBS_SLUG $PCF_TILE_PBS_VERSION "build-service-bundle") 
PBS_DUFFLE=$(downloadFromPivnet $PCF_TILE_PBS_SLUG $PCF_TILE_PBS_VERSION "duffle-cli-linux")
PBS_PBCLI=$(downloadFromPivnet $PCF_TILE_PBS_SLUG $PCF_TILE_PBS_VERSION "pb-cli-linux")

sudo cp $PBS_DUFFLE /usr/bin/duffle
sudo chmod 777 /usr/bin/duffle
sudo cp $PBS_PBCLI /usr/bin/pb
sudo chmod 777 /usr/bin/pb

#openssl x509 -outform der -in ca.pem -out ca.crt
#openssl x509 -outform der -in fullchain.pem -out fullchain.crt
#openssl rsa -outform der -in privkey.pem -out privkey.key

# INSTALL UAAC CLIENT IF NOT YET DONE
if [ ! -x /usr/local/bin/uaac ]; then
  sudo apt-get install ruby -y > /dev/null 2>&1
  sudo apt-get install ruby-dev -y > /dev/null 2>&1
  sudo gem install cf-uaac > /dev/null 2>&1
fi

CREDENTIALS=/tmp/credentials.yml
if [ ! -f $CREDENTIALS ]; then   
  echo "name: build-service-credentials"                                         >  $CREDENTIALS
  echo "credentials:"                                                           >>  $CREDENTIALS
  echo " - name: kube_config"                                                   >>  $CREDENTIALS
  echo "   source:"                                                             >>  $CREDENTIALS
  echo "     path: \"${SSH_HOME}/.kube/config\""                                >>  $CREDENTIALS
  echo "   destination:"                                                        >>  $CREDENTIALS
  echo "     path: \"/root/.kube/config\""                                      >>  $CREDENTIALS
  echo " - name: ca_cert"                                                       >>  $CREDENTIALS
  echo "   source:"                                                             >>  $CREDENTIALS
  echo "     path: \"${SSH_HOME}/pcfconfig/certificates/ca.pem\""               >>  $CREDENTIALS
  echo "   destination:"                                                        >>  $CREDENTIALS
  echo "     path: \"/cnab/app/cert/ca.crt\""                                   >>  $CREDENTIALS
  echo " - name: tls_cert"                                                      >>  $CREDENTIALS
  echo "   source:"                                                             >>  $CREDENTIALS
  echo "     path: \"${SSH_HOME}/pcfconfig/certificates/fullchain.pem\""        >>  $CREDENTIALS
  echo "   destination:"                                                        >>  $CREDENTIALS
  echo "     path: \"/cnab/app/cert/tls.crt\""                                  >>  $CREDENTIALS
  echo " - name: tls_key"                                                       >>  $CREDENTIALS
  echo "   source:"                                                             >>  $CREDENTIALS
  echo "     path: \"${SSH_HOME}/pcfconfig/certificates/privkey.pem\""          >>  $CREDENTIALS
  echo "   destination:"                                                        >>  $CREDENTIALS
  echo "     path: \"/cnab/app/cert/tls.key\""                                  >>  $CREDENTIALS
fi

#docker install
#docker login
#sudo docker login harbor.awspks.sschmidt.ch -u admin -p pivotal
#/home/ubuntu/.docker/config.json
#sudo ls -la /home/ubuntu/.docker/config.json

# LOGIN DOCKER ON HARBOR
sudo docker login harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \
     -u admin -p $PCF_TILE_HARBOR_ADMIN_PASS > /dev/null 2>&1
if [ $? -ne 0 ]; then
  debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))
  echo "ERROR: failed to login with docker on harbor"
  echo "       => sudo docker login harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \\"
  echo "          -u admin -p $PCF_TILE_HARBOR_ADMIN_PASS"
  exit 1
fi


version=0.0.4
touch /tmp/relocated.json
RELOCATE_LOG=/tmp/relocate.log; sudo rm -f $RELOCATE_LOG
if [ $(wc -c /tmp/relocated.json | awk '{ print $1 }') -eq 0 ]; then 
  messageTitle "Relocate Build Service images to Harbor registry (harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN})" 
  echo "-----------------------------------------------------------------------------------------------------------"
  sudo duffle relocate -f /tmp/build-service-${version}.tgz -m /tmp/relocated.json \
     -p harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}/library; ret=$?
  echo "-----------------------------------------------------------------------------------------------------------"
  if [ $ret -ne 0 ]; then 
    debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))
    echo "ERROR: failed to relocate Build Servics Images"
    echo "       => duffle relocate -f /tmp/build-service-${version}.tgz -m /tmp/relocated.json \\"
    echo "                          -p harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}/library"
    exit 1
  fi
fi

new_install=1
prj=$(sudo duffle list | egrep "^$PBS_SETUP" | awk '{ print $1 }')
if [ "${prj}" == "$PBS_SETUP" ]; then 
  messageTitle "Validate existing Project: $PBS_SETUP"
  sudo duffle status $PBS_SETUP > /dev/null 2>&1; ret=$?
  if [ $ret -ne 0 ]; then 
    messagePrint " - PBS Project $PBS_SETUP does not work anymore, clean it up"
    sudo duffle uninstall $PBS_SETUP > /dev/null 2>&1
    [ -f ~/.duffle/claims/$PBS_SETUP.json ] && sudo rm ~/.duffle/claims/$PBS_SETUP.json

    new_install=1
  else
    echo "-----------------------------------------------------------------------------------------------------------"
    sudo duffle list $PBS_SETUP
    echo "-----------------------------------------------------------------------------------------------------------"
    new_install=0
  fi
fi

#stt=$(duffle list $PBS_SETUP | egrep "^$PBS_SETUP" | awk '{ print $NF }') 

if [ ${new_install} -eq 1 ]; then
  LOGFILE=/tmp/${PBS_SETUP}.log; sudo rm -f $LOGFILE

  sudo duffle install $PBS_SETUP -c /tmp/credentials.yml  \
      --set domain=build-service.apps-cl1.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \
      --set kubernetes_env=cl1 \
      --set docker_registry=harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \
      --set registry_username="admin" \
      --set registry_password="$PCF_TILE_HARBOR_ADMIN_PASS" \
      --set uaa_url=https://api.pks.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}:8443 \
      -f /tmp/build-service-${version}.tgz \
      -m /tmp/relocated.json > $LOGFILE 2>&1
  if [ $? -ne 0 ]; then 
    debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))
    echo "ERROR: failed to install build-service (see logs: /tmp/${PBS_SETUP}.log"
    echo "       => sudo duffle install $PBS_SETUP -c /tmp/credentials.yml  \\"
    echo "             --set domain=build-service.apps-cl1.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \\"
    echo "             --set kubernetes_env=cl1 \\"
    echo "             --set docker_registry=harbor.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN} \\"
    echo "             --set registry_username=$PCF_TILE_PBS_ADMIN_USER \\"
    echo "             --set registry_password=$PCF_TILE_PBS_ADMIN_PASS \\"
    echo "             --set uaa_url=https://api.pks.${PCF_DEPLOYMENT_ENV_NAME}.${AWS_HOSTED_DNS_DOMAIN}:8443 \\"
    echo "             -f /tmp/build-service-${version}.tgz \\"
    echo "             -m /tmp/relocated.json"
    exit 1
  else
    echo "-----------------------------------------------------------------------------------------------------------"
    sudo duffle status $PBS_SETUP
    echo "-----------------------------------------------------------------------------------------------------------"
  fi
fi

##############################################################################################
############################### CREATE UAAC USER AND PASS ####################################
##############################################################################################

#om curl --path /api/v0/deployed/products/pivotal-container-service-53332360dfd96b45be2c/credentials/.properties.pks_uaa_management_admin_client
ADMIN_PASS=$($OM credentials -p pivotal-container-service -c .properties.uaa_admin_password | \
    sed -e '1,3d' -e '$d' | awk '{ print $2 }')
ADMIN_SECRET=$($OM credentials -p pivotal-container-service -c .properties.pks_uaa_management_admin_client | \
    sed -e '1,3d' -e '$d' | awk '{ print $2 }')

messageTitle "Create PBS credentials"
messagePrint " - UAAC Target:" "$UAAC_TARGET:8443"
messagePrint " - UAAC Admin Password:" "$ADMIN_PASS"
messagePrint " - UAAC Admin Secret:" "$ADMIN_SECRET"
messagePrint " - PBS User:" "$PCF_TILE_PBS_ADMIN_USER"
messagePrint " - PBS Pass:" "$PCF_TILE_PBS_ADMIN_PASS"
messagePrint " - PBS eMail:" "$PCF_TILE_PBS_ADMIN_EMAIL"

uaac target $UAAC_TARGET:8443 --skip-ssl-validation > /dev/null 2>&1
if [ $? -ne 0 ]; then
  debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))
  echo "ERROR: failed to connect to UAAC Target: $UAAC_TARGET"
  echo "       => uaac target $UAAC_TARGET --skip-ssl-validation"
  exit 1
fi

uaac token client get admin -s $ADMIN_SECRET
if [ $? -ne 0 ]; then
  debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))
  echo "ERROR: failed to login to UAAC Target: $UAAC_TARGET with user admin"
  echo "       => uaac token client get admin -s $ADMIN_SECRET"
  exit 1
fi

uaac user get $PCF_TILE_PBS_ADMIN_USER > /dev/null 2>&1
if [ $? -ne 0 ]; then
  uaac user add $PCF_TILE_PBS_ADMIN_USER -p $PCF_TILE_PBS_ADMIN_PASS --emails $PCF_TILE_PBS_ADMIN_EMAIL > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to create UAA user"
    echo "       => uaac user add $PCF_TILE_PBS_ADMIN_USER -p $PCF_TILE_PBS_ADMIN_PASS \\"
    echo "             --emails $PCF_TILE_PBS_ADMIN_EMAIL"
    exit 1
  fi
fi

pb api set https://$PBS_TAGET --skip-ssl-validation > /dev/null 2>&1
if [ $? -ne 0 ]; then
  debugInfos $(($BITMASK_JMP+$BITMASK_OPS+$BITMASK_PXS+$BITMASK_K8S))
  echo "ERROR: failed to set the pbs target to $PBS_TAGET"
  echo "       => pb api set https://$PBS_TAGET --skip-ssl-validation"
  exit 1
fi

##############################################################################################
################################# CREATE STOAGE CLASS ########################################
##############################################################################################

if [ "$PCF_DEPLOYMENT_CLOUD" == "GCP" ]; then
  kubectl get sc ci-storage > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    kubectl create -f ${PCFPATH}/files/pbs/gcp-storage-class-ci-storage.yml > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to add storage-class ci-storage"
      echo "       => kubectl create -f ${PCFPATH}/files/pbs/gcp-storage-class-ci-storage.yml "
      exit 1
    fi
  fi
fi

if [ "$PCF_DEPLOYMENT_CLOUD" == "Azure" ]; then
  kubectl get sc slow > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    kubectl create -f ${PCFPATH}/files/pbs/azure-storage-claass-slow.yml > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to add storage-class slow"
      echo "       => kubectl create -f ${PCFPATH}/files/pbs/azure-storage-claass-slow.yml "
      exit 1
    fi
  fi
fi

if [ "$PCF_DEPLOYMENT_CLOUD" == "AWS" ]; then 
  kubectl get sc gp2 > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    kubectl create -f ${PCFPATH}/files/pbs/aws-storage-claass-gp2.yml > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to add storage-class gp2"
      echo "       => kubectl create -f ${PCFPATH}/files/pbs/aws-storage-claass-gp2.yml "
      exit 1
    fi
  fi
fi

exit 0


